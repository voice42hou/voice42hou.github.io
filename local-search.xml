<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo建站碰壁指南</title>
    <link href="/2020/06/10/hexo%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/06/10/hexo%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<hr><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>​    下面从我这两天搭建<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>的各个步骤以及碰到的问题详细说明一下，并记录一些解决方案。整体的文案会比较随性，毕竟看得懂就行了。要建个人站，得先有个Github账号，然后得先在<strong>Repositories</strong>里建一个<code>username.github.io</code>（此处的<code>username</code>是github的用户名）！注：这点很重要，影响之后将个人站推到github上，进行公开访问，很香。当然，如果申请过个人域名，也是可以Link的只要在这个仓库里设置一下个人域名就行了，具体的这里就先不赘述了。</p><hr><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><p>参见<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>，太详细了</p><h4 id="2-前期准备"><a href="#2-前期准备" class="headerlink" title="2. 前期准备"></a>2. 前期准备</h4><p>安装 Hexo 相当简单。然而在安装前，必须检查电脑中是否已安装下列应用程序：</p><ul><li>Node.js (至少Version 6.9)；</li><li>Git（方便使用各种命令和下载推送代码）；</li><li>npm （一般Hexo会自带）；</li></ul><p>几个注意事项：</p><ul><li>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免引起不必要的麻烦，建议使用git bash来执行.</li><li>hexo不同版本差别非常大，基本上很多网上教程都是V5.x、V6.x版本的，甚至更早，注意不要被误导.</li><li>hexo有2种_config.yml配置文件，一个是根目录下的全局配置文件，一个是各个theme下的主题配置文件.</li></ul><h5 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h5><p>​    通过借用github的公开平台存放网页数据，hexo静态网页就这点好，不占资源，推到仓库之后，就不单单是本地项目了。</p><p>​    在github的Repositories里新建一个名为<code>username.github.io</code>的仓库（其中username为Github用户名，注意区分大小写，这一步务必正确执行，不正幺蛾子，你的用户名是啥就填啥，别整花里胡哨的，当然整花里胡哨的也是能修改的，只是避免不必要的麻烦），完成之后，就可以通过<a href="https://username.github.io/" target="_blank" rel="noopener">https://username.github.io/</a> 直接访问了，当然之后的网页相关代码也是推到这个仓库下（还有一点，可以备份，但是发布的信息必须在master分支下，如果在其他子分支下，需要修改hexo，不建议，可以选择在master下建立备份分支，将备份内容放到这个分支下）</p><pre><code class="hljs routeros">&#123;%<span class="hljs-built_in"> note </span>warning&#125;注册用邮箱必须验证，否则无法实现推个人站&#123;%endnote%&#125;</code></pre><p>接下来就是打开git bush安装hexo，在git bush中输入<code>npm install hexo --save</code></p><h4 id="3-Hexo初始化"><a href="#3-Hexo初始化" class="headerlink" title="3. Hexo初始化"></a>3. Hexo初始化</h4><p>在电脑任意位置，新建空文件夹（一定要是空文件夹，否则初始化报错），进入该文件夹，打开git bush，输入以下指令：</p><pre><code class="hljs git">$ hexo init</code></pre><p>执行完成后，生成了许多文件</p><p>Hexo常见命令：</p><blockquote><p>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #部署到GitHub<br>hexo help # 查看帮助<br>hexo version #查看Hexo的版本</p></blockquote><p>缩写：</p><blockquote><p>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy</p></blockquote><p>组合命令：</p><blockquote><p>hexo s -g #生成并本地预览<br>hexo d -g #生成并上传</p></blockquote><p>hexo s是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容。第一次初始化的时候Hexo已经有一篇名为 Hello World 的样板，默认的主题比较简洁，可以去 Hexo 的主题栏选择一个喜欢的，这是 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题中心</a> 。</p><h5 id="替换主体"><a href="#替换主体" class="headerlink" title="替换主体"></a>替换主体</h5><p>个人使用的是<a href="https://hexo.fluid-dev.com/docs/" target="_blank" rel="noopener">fluid</a>，也推荐<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next</a>这个有相册，具体使用方法参见链接。</p><h4 id="4-通过username-github-io访问"><a href="#4-通过username-github-io访问" class="headerlink" title="4. 通过username.github.io访问"></a>4. 通过username.github.io访问</h4><h5 id="上传代码到仓库"><a href="#上传代码到仓库" class="headerlink" title="上传代码到仓库"></a>上传代码到仓库</h5><p>在上传代码到Github之前，记得先把你以前所有代码下载下来，虽然Github有版本管理，但备份一下总是没错的，因为从Hexo提交代码时会把你以前的所有代码都删掉。<br>如果你一切都配置好了，发布上传用hexo d就行了。</p><h5 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h5><p>第一个需要配置的就是用户的用户名和email，这是因为Git是分布式版本控制系统，所以每个机器都必须自报家门：你的名字和Email地址，这些内容会出现在你的每一个提交（commit）里面，方便控制。配置邮件地址和用户名：</p><blockquote><p>$ git config –global user.name “username”// 你的github用户名，非昵称</p><p>$ git config –global user.email “<a href="mailto:xxx@qq.com">xxx@qq.com</a>“// 填写你的github注册邮箱</p></blockquote><h5 id="配置ssh-key"><a href="#配置ssh-key" class="headerlink" title="配置ssh key"></a>配置ssh key</h5><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的Github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><blockquote><p>$ cd ~/. ssh #检查本机已存在的ssh密钥</p></blockquote><p>如果提示：No such file or directory 说明你是第一次使用git。</p><blockquote><p>$ ssh-keygen -t rsa -C “邮件地址”</p></blockquote><p>到光标等待录入的时候连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh/id_rsa.pub文件（C:/Users/xxx.ssh），记事本打开并复制里面的内容，打开你的github主页，进入相应仓库的设置 -&gt; SSH and GPG keys -&gt; New SSH key，将刚复制的内容粘贴到key那里，title随便填，保存。</p><h5 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h5><blockquote><p>$ ssh -T <a href="mailto:git@github.com">git@github.com</a> # 注意邮箱地址不用改</p></blockquote><p>如果提示Are you sure you want to continue connecting (yes/no)?输入yes，然后会看到：</p><p>Hi xxxxx! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>看到这个信息说明SSH已配置成功！</p><h5 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置_config.yml文件</h5><p>配置_config.yml中有关deploy的部分：</p><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:  <span class="hljs-attribute">type</span>: git  <span class="hljs-attribute">repository</span>: git<span class="hljs-variable">@github</span>.<span class="hljs-attribute">com</span>:用户名/用户名.github.io.git  <span class="hljs-attribute">branch</span>: master</code></pre><p>此时直接执行hexo d的话一般会报错：Deployer not found: github 或者 Deployer not found: git，原因是还需要安装一个插件：</p><blockquote><p>$ npm install hexo-deployer-git –save</p></blockquote><p>部署这个命令一定要用git bash，否则会提示Permission denied (publickey).<br>打开你的git bash，输入hexo d就会将本次有改动的代码全部提交，没有改动的不会。</p><h6 id="保留CNAME等文件"><a href="#保留CNAME等文件" class="headerlink" title="保留CNAME等文件"></a>保留CNAME等文件</h6><p>提交之后到仓库上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的。由于hexo默认会把所有md文件都转换成html，包括README.md，所以需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。</p><h4 id="5-发表文章"><a href="#5-发表文章" class="headerlink" title="5. 发表文章"></a>5. 发表文章</h4><p>使用cd 命令定位到我们的hexo根目录，执行命令：</p><blockquote><p>hexo new “文章名”</p></blockquote><p>hexo会帮我们在_posts下生成相关md文件，我们只需要打开这个文件就可以开始写博客了，默认生成的内容只有前三项，一般完整的格式为：</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章名</span><span class="hljs-attr">date:</span> <span class="hljs-string">时间</span><span class="hljs-attr">categories:</span> <span class="hljs-string">标签</span><span class="hljs-attr">keywords:</span> <span class="hljs-string">[关键词]</span><span class="hljs-attr">description:</span> <span class="hljs-string">描述</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-meta">---</span></code></pre><p>具体参见<a href="https://hexo.io/docs/front-matter" target="_blank" rel="noopener">Front-matter</a>文档</p><p>当然你也可以直接自己在XXXHexoBlog/source/_posts新建md文件，用这个命令的好处是帮我们自动生成了时间。</p><p>写好之后保存文件，用hexo d -g命令部署到仓库，然后访问仓库地址<a href="https://username.github.io就可以了。" target="_blank" rel="noopener">https://username.github.io就可以了。</a></p><p><strong>注： 在标签后赋值属性之间的： 务必使用空格，所有格式均需保证</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
